import { $, Kind, Type, Number as Number_, List } from '..'

/**
 * Given a length and a list, return a list of lists, where each sublist has the
 * specified length and is generated by sliding a window of the specified length
 * over the input list.
 *
 * @template {Number.Number} N - The length of the sliding window.
 * @template {unknown[]} T - The list to generate the sliding window from.
 *
 * @example
 * ```ts
 * import { List } from "hkt-toolbelt";
 *
 * type T0 = List._$slidingWindow<2, [1, 2, 3, 4, 5]>
 * //   ^? [[1, 2], [2, 3], [3, 4], [4, 5]]
 * ```
 */
export type _$slidingWindow<
  N extends Number_.Number,
  T extends unknown[],
  O extends unknown[] = []
> = 0 extends 1
  ? never
  : T extends [unknown, ...infer Tail]
    ? T['length'] extends N
      ? [...O, List._$take<N, T>]
      : _$slidingWindow<N, Tail, [...O, List._$take<N, T>]>
    : O[number] extends never
      ? never
      : O[number] extends []
        ? [[]]
        : O

interface SlidingWindow_T<N extends Number_.Number> extends Kind.Kind {
  f(x: Type._$cast<this[Kind._], unknown[]>): _$slidingWindow<N, typeof x>
}

/**
 * Given a length and a list, return a list of lists, where each sublist has the
 * specified length and is generated by sliding a window of the specified length
 * over the input list.
 *
 * @template {Number.Number} N - The length of the sliding window.
 * @template {unknown[]} T - The list to generate the sliding window from.
 *
 * @example
 * ```ts
 * import { List } from "hkt-toolbelt";
 *
 * type T0 = $<$<List.SlidingWindow, 2>, [1, 2, 3, 4, 5]>
 * //   ^? [[1, 2], [2, 3], [3, 4], [4, 5]]
 * ```
 */
export interface SlidingWindow extends Kind.Kind {
  f(x: Type._$cast<this[Kind._], Number_.Number>): SlidingWindow_T<typeof x>
}

/**
 * Given a length and a list, return a list of lists, where each sublist has the
 * specified length and is generated by sliding a window of the specified length
 * over the input list.
 *
 * @param {Number.Number} N - The length of the sliding window.
 * @param {unknown[]} T - The list to generate the sliding window from.
 *
 * @example
 * ```ts
 * import { List } from "hkt-toolbelt";
 *
 * const result = List.slidingWindow(2)([1, 2, 3, 4, 5])
 * //    ^? [[1, 2], [2, 3], [3, 4], [4, 5]]
 * ```
 */
export const slidingWindow = ((n: Number_.Number) => (list: unknown[]) => {
  const result: unknown[][] = []
  const targetLength = Number(n)

  if (targetLength === 0) {
    return [[]]
  } else if (targetLength > list.length) {
    return Type.never
  }

  for (let i = 0; i < list.length - targetLength + 1; i++) {
    result.push(list.slice(i, i + targetLength))
  }

  return result
}) as Kind._$reify<SlidingWindow>
